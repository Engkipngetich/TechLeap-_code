VERSION CONTROL & COLLABORATION
 How I Would Use Git to Collaborate on a Team Project
To collaborate effectively on a team project, I would use Git (and GitHub or GitLab) to manage code versions, track changes, and merge work from multiple developers seamlessly.

Typical Workflow:
1. Clone the repository to get a local copy: 
git clone https://github.com/team/project.git

2. Create a new branch for the feature or bug fix to keep work isolated:
git checkout -b kk (for my cases)

3. Make changes and commit with clear messages:
 git add .
 git commit -m "Description of what is being added in present tense"

4. push changes to the remote repository:
 git push origin kk

5. Create a pull request on GitHub to request code review and merge changes into the main branch
6. Pull the latest update regularly to stay in sync with the team:
 git pull origin main.
  

# common Git Command I use Often 
 git status
 - it shows which files have been modified, added, or staged for commit.
 - It helps me keep track of what's changed before committing or pushing code. 

# One Problem Iâ€™ve Faced and How I Solved It

- Problem: Merge conflicts when two developers edited the same file or line of code.

# Solution:

I ran git pull origin main to fetch the latest changes.
Git highlighted the conflicting sections in the file.
I manually reviewed and resolved conflicts by keeping the correct code.

# Then I committed the resolved file using:
 - git add .
 - git commit -m "Resolve merge conflict in specific file e.g app.py/App.js"

Finally, I pushed the resolved version back to the repository.